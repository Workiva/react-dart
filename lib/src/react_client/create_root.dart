@JS()
library react_client.create_root;

import 'dart:html';
import 'package:js/js.dart';
import 'package:meta/meta.dart';
import 'package:react/src/react_client/js_interop/react_dom_client.dart';
import 'package:react/src/react_client/private_utils.dart' show validateJsApiThenReturn;

/// Returns the `ReactRoot` for the supplied `container`.
///
/// The [ReactRoot] can be used to render a `ReactElement` into the DOM with render:
///
/// ```dart
/// import 'dart:html';
/// import 'package:react/react_dom.dart' as react_dom;
///
/// main() {
///   final root = react_dom.createRoot(querySelector('#rootContainerEl'));
///   root.render(someReactElement);
/// }
/// ```
///
/// `createRoot` also accepts [CreateRootOptions] as the second argument.
ReactRoot createRoot(/*Element|DocumentFragment*/ Node container, [CreateRootOptions? options]) {
  final jsFn = validateJsApiThenReturn(() => ReactDOM.createRoot);

  if (options == null) {
    return jsFn(container);
  }

  return jsFn(container, options.toJs());
}

/// The shape of the object returned by [ReactDOM.createRoot].
@JS()
@anonymous
abstract class ReactRoot {
  /// Renders [children] (either a `ReactElement` or a list of `ReactElement`s) into the DOM within
  /// the `container` supplied to the `createRoot()` call.
  ///
  /// ### Wrap with `ReactTestUtils.act()` within Dart unit tests
  ///
  /// In order for the DOM to hydrate synchronously the same way it did when calling
  /// `react_dom.render`, you must wrap the call to `root.render` with `ReactTestUtils.act()`:
  ///
  /// ```dart
  /// import 'dart:html';
  /// import 'package:react/react_dom.dart' as react_dom;
  ///
  /// main() {
  ///   test('', () {
  ///     final root = react_dom.createRoot(querySelector('#rootContainerEl'));
  ///     react_dom.ReactTestUtils.act(() => root.render(someReactElement));
  ///   });
  /// }
  /// ```
  ///
  /// See: https://github.com/reactwg/react-18/discussions/5#discussioncomment-1322321
  external void render(/*ReactElement|List<ReactElement>*/ dynamic children);

  /// Unmounts this instance from the DOM.
  external void unmount();
}

/// The options for the second optional arg of [ReactDOM.createRoot].
class CreateRootOptions {
  /// Optional prefix React uses for ids generated by the `useId` hook. Useful to avoid conflicts when using multiple roots on the same page. Must be the same prefix used on the server.
  final String? identifierPrefix;

  /// Optional callback called when React automatically recovers from errors.
  final void Function(/*Error*/ dynamic error)? onRecoverableError;

  const CreateRootOptions({
    this.identifierPrefix,
    this.onRecoverableError,
  });

  @protected
  JsCreateRootOptions toJs() {
    final identifierPrefix = this.identifierPrefix;
    final onRecoverableError = this.onRecoverableError;
    final options = JsCreateRootOptions();
    if (identifierPrefix != null) options.identifierPrefix = identifierPrefix;
    if (onRecoverableError != null) options.onRecoverableError = allowInterop(onRecoverableError);
    return options;
  }
}

@JS()
@anonymous
class JsCreateRootOptions {
  external set identifierPrefix(String? value);
  external String? get identifierPrefix;

  external set onRecoverableError(void Function(/*Error*/ dynamic error)? value);
  external void Function(/*Error*/ dynamic error)? get onRecoverableError;
}
